Index: SHERPA/Tools/Output_RootNtuple.C
===================================================================
--- SHERPA/Tools/Output_RootNtuple.C	(revision 17497)
+++ SHERPA/Tools/Output_RootNtuple.C	(working copy)
@@ -63,6 +63,7 @@
 
 Output_RootNtuple::~Output_RootNtuple()
 {
+  PrepareTerminate();
 }
 
 void Output_RootNtuple::PrepareTerminate()
Index: PHASIC++/Channels/VHAAG_ND.C
===================================================================
--- PHASIC++/Channels/VHAAG_ND.C	(revision 17497)
+++ PHASIC++/Channels/VHAAG_ND.C	(working copy)
@@ -725,7 +725,6 @@
 
 void VHAAG_ND::CalculateS0(Cut_Data * cuts) 
 {
-  m_s0=20.;
   if (m_s0>0.) return;
   m_s0 = 0.;
   for (int i=0;i<cuts->ncut;i++) {
Index: PHASIC++/Process/Single_Process.C
===================================================================
--- PHASIC++/Process/Single_Process.C	(revision 17497)
+++ PHASIC++/Process/Single_Process.C	(working copy)
@@ -106,6 +106,7 @@
 {
   m_wgtinfo.m_w0=m_last[0]=0.0;
   p_int->SetMomenta(p);
+  double flux=0.25/sqrt(sqr(p[0]*p[1])-p[0].Abs2()*p[1].Abs2());
   if (GetSubevtList()==NULL) {
     if (m_zero) return 0.0;
     Scale_Setter_Base *scs(ScaleSetter());
@@ -115,8 +116,8 @@
     }
     scs->SetCaller(this);
     if (Partonic(p,0)==0.0) return 0.0;
-    double flux=0.25/sqrt(sqr(p[0]*p[1])-p[0].Abs2()*p[1].Abs2());
-    if (m_wgtinfo.m_nx==0) m_wgtinfo.m_w0 = m_lastxs*flux;
+    if (m_wgtinfo.m_nx==0) m_wgtinfo.m_w0 = m_lastxs;
+    m_wgtinfo*=flux;
     m_wgtinfo.m_mur2=scs->Scale(stp::ren);
     if (m_lastxs==0.0) return m_last[0]=0.0;
     return m_last[0]=m_lastxs*BeamISRWeight(scs->Scale(stp::fac),0);
@@ -124,7 +125,10 @@
   Partonic(p,0);
   NLO_subevtlist *subs(GetSubevtList());
   BeamISRWeight(subs,0);
-  for (size_t i=0;i<subs->size();++i) m_last[0]+=(*subs)[i]->m_last[0];
+  for (size_t i=0;i<subs->size();++i) {
+    m_last[0]+=(*subs)[i]->m_last[0];
+    (*subs)[i]->m_mewgt*=flux;
+  }
   return m_last[0];
 }
 
Index: AMEGIC++/DipoleSubtraction/Single_DipoleTerm.C
===================================================================
--- AMEGIC++/DipoleSubtraction/Single_DipoleTerm.C	(revision 17497)
+++ AMEGIC++/DipoleSubtraction/Single_DipoleTerm.C	(working copy)
@@ -491,6 +491,7 @@
   if (p_partner!=this) {
     if (m_lookup) m_lastxs = p_partner->LastXS()*m_sfactor*Norm()/p_partner->Norm();
     else m_lastxs = p_partner->operator()(mom,cms,mode)*m_sfactor*Norm()/p_partner->Norm();
+    m_subevt.m_result = m_subevt.m_last[0] = m_subevt.m_last[1] = 0.;
     m_subevt.m_me = m_subevt.m_mewgt = -m_lastxs;
     m_subevt.m_muf2 = p_partner->GetSubevt()->m_muf2;
     m_subevt.m_mur2 = p_partner->GetSubevt()->m_mur2;
@@ -508,18 +509,19 @@
   p_int->SetMomenta(p_LO_labmom);
   p_LO_process->Integrator()->SetMomenta(p_LO_labmom);
 
-  double M2 =trg ? p_LO_process->operator()
-    (p_LO_labmom,p_LO_mom,p_dipole->GetFactors(),
-     p_dipole->GetDiPolarizations(),mode) : 0.0;
   double df = p_dipole->GetF();
   m_subevt.m_me = m_subevt.m_mewgt = m_subevt.m_result =
     m_subevt.m_last[0] = m_subevt.m_last[1] = 0.;
 
   if (!(df>0.)&& !(df<0.)) return m_lastxs=df;
 
+  double M2 =trg ? p_LO_process->operator()
+    (p_LO_labmom,p_LO_mom,p_dipole->GetFactors(),
+     p_dipole->GetDiPolarizations(),mode) : 0.0;
+
   if (!trg) return m_lastxs=m_subevt.m_me=m_subevt.m_mewgt=0.;
 
-  m_lastxs = M2 * df * KFactor() * Norm();
+  m_lastxs = M2 * df * p_dipole->SPFac() * KFactor() * Norm();
   m_subevt.m_me = m_subevt.m_mewgt = -m_lastxs;
   m_subevt.m_muf2 = p_scale->Scale(stp::fac);
   m_subevt.m_mur2 = p_scale->Scale(stp::ren);
Index: AMEGIC++/DipoleSubtraction/Single_Real_Correction.C
===================================================================
--- AMEGIC++/DipoleSubtraction/Single_Real_Correction.C	(revision 17497)
+++ AMEGIC++/DipoleSubtraction/Single_Real_Correction.C	(working copy)
@@ -288,8 +288,9 @@
   for (size_t i=0;i<m_subtermlist.size();i++) if (m_subtermlist[i]->IsValid()){
     double test = (*m_subtermlist[i])(&mom.front(),cms,mode);
     if (IsBad(test)) res=false;
-    if (!IsZero(test) || m_pinfo.m_nlomode==2)
+    if (test!=0.0 || m_pinfo.m_nlomode==2) {
       m_subevtlist.push_back(m_subtermlist[i]->GetSubevt());
+    }
   }
 
   m_subevtlist.push_back(&m_realevt);
Index: AMEGIC++/DipoleSubtraction/FF_DipoleSplitting.C
===================================================================
--- AMEGIC++/DipoleSubtraction/FF_DipoleSplitting.C	(revision 17497)
+++ AMEGIC++/DipoleSubtraction/FF_DipoleSplitting.C	(working copy)
@@ -65,7 +65,7 @@
       return nan;
    }
 
-  double h=SPFac()/(2.*m_pi*m_pj);  
+  double h=1.0/(2.*m_pi*m_pj);  
   switch (m_ft) {
   case 1:
     h*= m_sff;
@@ -167,7 +167,7 @@
       return nan;
    }
 
-  double h=SPFac()/((m_pi+m_pj).Abs2()-m_mij);  
+  double h=1.0/((m_pi+m_pj).Abs2()-m_mij);  
   switch (m_ft) {
   case 1:
     h*= m_sff;
Index: AMEGIC++/DipoleSubtraction/IF_DipoleSplitting.C
===================================================================
--- AMEGIC++/DipoleSubtraction/IF_DipoleSplitting.C	(revision 17497)
+++ AMEGIC++/DipoleSubtraction/IF_DipoleSplitting.C	(working copy)
@@ -49,7 +49,7 @@
   if (m_uj<=m_amin) {
     return nan;
   }
-  double h=SPFac()/(2.*m_pi*m_pj)/m_xijk;  
+  double h=1.0/(2.*m_pi*m_pj)/m_xijk;  
   switch (m_ft) {
   case 1:
     h*=m_sff;
@@ -122,7 +122,7 @@
   if (m_uj<=m_amin) {
     return nan;
   }
-  double h=SPFac()/(2.*m_pi*m_pj)/m_xijk;  
+  double h=1.0/(2.*m_pi*m_pj)/m_xijk;  
   switch (m_ft) {
   case 1:
     h*=m_sff;
Index: AMEGIC++/DipoleSubtraction/FI_DipoleSplitting.C
===================================================================
--- AMEGIC++/DipoleSubtraction/FI_DipoleSplitting.C	(revision 17497)
+++ AMEGIC++/DipoleSubtraction/FI_DipoleSplitting.C	(working copy)
@@ -48,7 +48,7 @@
    if ((1.-m_xijk)<=m_amin) {
      return nan;
    }
-  double h=SPFac()/(2.*m_pi*m_pj)/m_xijk;  
+  double h=1.0/(2.*m_pi*m_pj)/m_xijk;  
   switch (m_ft) {
   case 1:
     h*=m_sff;
@@ -137,7 +137,7 @@
    if ((1.-m_xijk)<=m_amin) {
      return nan;
    }
-  double h=SPFac()/((m_pi+m_pj).Abs2()-m_mij)/m_xijk;
+  double h=1.0/((m_pi+m_pj).Abs2()-m_mij)/m_xijk;
   switch (m_ft) {
   case 1:
     h*=m_sff;
Index: AMEGIC++/DipoleSubtraction/II_DipoleSplitting.C
===================================================================
--- AMEGIC++/DipoleSubtraction/II_DipoleSplitting.C	(revision 17497)
+++ AMEGIC++/DipoleSubtraction/II_DipoleSplitting.C	(working copy)
@@ -54,7 +54,7 @@
    if (m_vi<=m_amin) {
      return nan;
    }
-   double h=SPFac()/(2.*m_pi*m_pj)/m_xijk;  
+   double h=1.0/(2.*m_pi*m_pj)/m_xijk;  
   switch (m_ft) {
   case 1:
     h*=m_sff;
